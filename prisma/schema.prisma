// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String
  phone         String    @unique
  role          Role?     @relation(fields: [roleId], references: [id], onDelete: SetNull)
  roleId        String?   @map("role_id")
  organization  String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  userInfo      UserInfo?
  userInfoId    String?   @map("user_info_id")

  accounts      Account[]
  sessions      Session[]
}

model UserInfo {
  id        String  @id @default(cuid())
  userId    String  @unique @map("user_id")
  firstName String  @map("first_name")
  lastName  String  @map("last_name")
  address   String?
  city      String?
  state     String?
  country   String?
  zip       String?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id          String       @id @default(cuid())
  name        UserRole     @unique @default(USER)
  users       User[]
  permissions Permission[]
}

model Permission {
  id   String @id @default(cuid())
  name String @unique
  role Role[]
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  start       DateTime
  end         DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
}

enum ReportStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
}
